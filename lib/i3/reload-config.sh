#!/bin/bash

dotfiles_dir=$1
source $dotfiles_dir/zshenv 2>/dev/null

template_file=$dotfiles_dir/i3/config
config_file=~/.config/i3/config
config_contents=$(cat $template_file)

# On the fly configurations {{{1
#==================================================
# Test if optional packages are installed and, if so,  them.

function config_link {
  local config_for=$1
  local config_src=$dotfiles_dir/$config_for
  local config_dst=$XDG_CONFIG_HOME/$config_for

  if [[ ! -L $config_dst ]] && [[ -d $config_dst || -f $config_dst ]]; then
    mv $config_dst $config_dst.backup.$(date +'%s')
  elif [[ $(readlink $config_dst) != $config_src ]]; then
    # `$config_dst` must be a symlink so it's safe to remove it
    rm $config_dst
    ln -s $config_src $config_dst
  fi
}

function add_startup_app {
  local cmd=$1
  config_contents=$(
    echo "$config_contents" |\
    sed -E "0,/^exec --no-startup-id.+$/{s#^((exec --no-startup-id).+$)#\2 ${cmd}\n\1#}")
}

if [[ $(type -p udiskie) ]]; then
  if [[ $(type -p twmnd) ]]; then
    add_startup_app 'udiskie -asF2'
  else
    add_startup_app 'udiskie -asFN2'
  fi
fi

if [[ $(type -p twmnd) ]]; then
  add_startup_app 'twmnd'
  config_link 'twmn'
fi

if [[ $(type -p compton) ]]; then
  add_startup_app 'compton -b --config $XDG_CONFIG_HOME/compton/compton.conf'
  config_link 'compton'
fi

if [[ $(type -p feh) && -f $XDG_CONFIG_HOME/i3/wallpaper ]]; then
  cmd='feh --no-fehbg --bg-scale $XDG_CONFIG_HOME/i3/wallpaper'
  config_contents=$(
    echo "$config_contents" |\
    sed -E "0,/^exec_always.+$/{s#^((exec_always).+$)#\1\n\2 ${cmd}\n#}")
fi
#= endsection }}}1

# Variable parsing {{{1
#==================================================
# Variables defined in the file itself {{{2
#--------------------------------------------------
var_defs=$(
  echo "$config_contents" |\
  # get all variable definitions except the one for '$mod'
  grep -E 'set \$[^mod]+' |\

  # we don't care about the commented ones
  sed -E '/^\s*#/ d' |\

  # the 'set' keyword is no longer needed
  sed 's/set //' |\

  # make it easier to loop through declarations
  # NOTE: '=' in a declaration will break the parser
  sed -E 's/\s+/=/')
# remove the declarations
config_contents=$(echo "$config_contents" | sed -E 's/set \$[^mod].+$//')

# do the replacement
for def in $var_defs; do
  config_contents=$(
    echo "$config_contents" |\
    sed "s/$(echo $def | cut -d'=' -f1)\b/$(echo $def | cut -d'=' -f2)/g")
done

# Environment variables {{{2
#--------------------------------------------------
function inline_env_var {
  local name=$1
  # escape '/' chars in a value that is a path
  local value=${2//\//\\/}

  config_contents=$(
    echo "$config_contents" |\
    sed "s/\$${name}/${value}/g")
}

inline_env_var 'X_DOTFILES' $dotfiles_dir

# Replace all exported variables in `$dotfiles_dir/zshenv`.
# NOTE: Not all of these are actually used in the configuration file but that I
#       want to be future poof on this one.
var_defs=$(
  cat $dotfiles_dir/zshenv |\
  # get all exported variables
  grep '^export [A-Z_]\+=.\+$' |\
  # remove the line that exports `X_DOTFILES`
  grep -v 'X_DOTFILES' |\
  # get only the variable name
  sed 's/export //' | sed 's/=.\+$//')

for var in $var_defs; do
  inline_env_var $var ${!var}
done
#= endsection }}}1

# Clean up {{{1
#==================================================
config_contents=$(
echo "$config_contents" |\
  # remove comments
  sed -E '/^\s*#/d' |\
  # remove empty lines
  sed -E '/^\s*$/d' |\
  # remove repeated spaces
  sed -E 's/([^ ])  +/\1 /g')
#= endsection }}}1

# Write and load the parsed configuration {{{1
#==================================================
cat <<EOF > $config_file
#
#==============================================================================
#
# DO NOT EDIT THIS FILE.
#
#==============================================================================
#
# New settings must be set in "$template_file" and loaded with
# \`$dotfiles_dir/lib/i3/reload-config.sh\` or using the keyboard shortcut
# "\$mod+Shift+r".
#
$config_contents
EOF

i3-msg 'restart'
#= endsection }}}1
