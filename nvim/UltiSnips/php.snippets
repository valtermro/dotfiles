priority -50

#= Basic declarations
#==================================================
snippet fun "function declaration"
function $1($2)
{
	$3
}$0
endsnippet

#= Flow control
#==================================================
snippet if "if statement"
if ($1) {
	$2
}$0
endsnippet

snippet ifel "if/else statement"
if ($1) {
	$2
} else {
	$3
}$0
endsnippet

snippet foe "foreach loop"
foreach ($$1 as $$2) {
	$3
}$0
endsnippet

snippet foek "foreach loop with key"
foreach ($$1 as $${2:key} => $${3:value}) {
	$4
}$0
endsnippet

snippet for "for loop"
for ($${1:i} = ${2:0}; $$1 < $${3:length}; $$1++$4) {
	$5
}$0
endsnippet

snippet whi "while loop"
while ($1) {
	$2
}$0
endsnippet

snippet dow "do/while loop"
do {
	$2
} while ($1);$0
endsnippet

#= OOP
#==================================================
snippet ns "namespace"
namespace $1;$0
endsnippet

snippet cls "class declaration"
class $1
{
	public function ${2:__construct}($3)
	{
		$0
	}
}
endsnippet

snippet clse "extended class declaration"
class $1 extends $2
{
	public function ${3:__construct}($4)
	{
		$5
	}$0
}
endsnippet

snippet met "public method"
public function $1($2)
{
	$3
}$0
endsnippet

snippet pmet "protected method"
protected function $1($2)
{
	$3
}$0
endsnippet

snippet pimet "private method"
private function $1($2)
{
	$3
}$0
endsnippet

snippet smet "public static method"
public static function $1($2)
{
	$3
}$0
endsnippet

snippet psmet "protected static method"
protected static function $1($2)
{
	$3
}$0
endsnippet

snippet pismet "private static method"
private static function $1($2)
{
	$3
}$0
endsnippet

#= PHPUnit
#==================================================
snippet tcls "Test class"
<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class `!p snip.rv = snip.basename` extends TestCase
{
	use DatabaseMigrations;

	/** @test */
	public function it_${2:name}()
	{
		$3
	}$0
}
endsnippet

snippet tup "Test setUp"
public function setUp()
{
	parent::setUp();

	$2
}$0
endsnippet

snippet tdo "Test tearDown"
public function tearDown()
{
	parent::tearDown();

	$2
}$0
endsnippet

snippet tme "Test method"
/** @test */
public function $1()
{
	$2
}$0
endsnippet
