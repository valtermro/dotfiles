priority -50

#= Basic expressions {{{1
#==================================================
snippet clog "console.log"
console.log(${0:${VISUAL}})
endsnippet
#= endsection }}}1

#= Basic declarations {{{1
#==================================================
snippet fun ""
const ${1:name} = ($2) => {
	${0:${VISUAL}}
};
endsnippet

snippet cls "class declaration"
class $1 {
	constructor($2) {
		$0
	}
}
endsnippet
#= endsection }}}1

#= Flow control {{{1
#==================================================
snippet if "if statement"
if ($1) ${2:{
	${3:${VISUAL}}$4
}}$5
endsnippet

snippet for "for loop"
for (let ${1:i} = 0; $1 < ${2:lenght}; $1++$3) ${4:{
	${5:${VISUAL}}$6
}}$0
endsnippet

snippet whi "while loop"
while ($1) ${2:{
	${0:${VISUAL}}
}}
endsnippet

snippet try "try/catch block"
try {
	${1:${VISUAL}}
} catch (err) {
	$0
}
endsnippet
#= endsection }}}1

#= import/export {{{1
#==================================================
snippet imp "import statement"
import $1 from '${2:$1}';
endsnippet

snippet exp "export ..."
export $1
endsnippet

snippet expd "export default ..."
export default $1
endsnippet

snippet efun "export function"
export function $1($2) {
	$3
}$0
endsnippet

snippet edfun "export default function"
export default function $1($2) {
	$3
}$0
endsnippet

snippet ecls "export class ..."
export class $1 {
	constructor($2) {
		$3
	}$0
}
endsnippet

snippet edcls "export default class ..."
export default class $1 {
	constructor($2) {
		$3
	}$0
}
endsnippet
#= endsection }}}1

#= Mocha/Jasmine globals {{{1
#==================================================
snippet be "before(...)"
before(() => {
	${1:${VISUAL}}$0
});
endsnippet

snippet bee "beforeEach(...)"
beforeEach(() => {
	${1:${VISUAL}}$0
});
endsnippet

snippet af "after(...)"
after(() => {
	${1:${VISUAL}}$0
});
endsnippet

snippet afe "afterEach(...)"
afterEach(() => {
	${1:${VISUAL}}$0
});
endsnippet

snippet des "describe(...)"
describe('$1', () => {
	${0:${VISUAL}}
});
endsnippet

snippet it "it(...)"
it('$1', () => {
	${0:${VISUAL}}
});
endsnippet

snippet its "it.skip(...)"
it.skip('$0', () => {
	// TODO
});
endsnippet
#= endsection }}}1
