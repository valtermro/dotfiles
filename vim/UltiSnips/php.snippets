priority -50

#= Helpers {{{1
#==================================================
global !p
def path_to_namespace():
	return '\\'.join([p.capitalize() for p in path.split('/')[:-1]])
endglobal
#= endsection }}}1

#= Basic {{{1
#==================================================
snippet ?p "<?php"
<?php

namespace `!p snip.rv = path_to_namespace()`;

$0
endsnippet

snippet fun "function declaration"
function $1($2)
{
	${0:${VISUAL}}
}
endsnippet
#= endsection }}}1

#= Flow control {{{1
#==================================================
snippet if "if statement"
if ($1) {
	${0:${VISUAL}}$3
}
endsnippet

snippet ifel "if/else statement"
if ($1) {
	${0:${VISUAL}}$3
} else {
	$4
}
endsnippet

snippet foe "foreach loop"
foreach ($$1 as $${2:value}) {
	${0:${VISUAL}}
}
endsnippet

snippet foek "foreach loop with key"
foreach ($$1 as $${2:key} => $${3:value}) {
	${0:${VISUAL}}
}
endsnippet

snippet for "for loop"
for ($${1:i} = ${2:0}; $$1 < ${3:count}; $$1++$4) {
	${0:${VISUAL}}
}
endsnippet

snippet whi "while loop"
while ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet dow "do/while loop"
do {
	${0:${VISUAL}}
} while ($1);
endsnippet
#= endsection }}}1

#= OOP {{{1
#==================================================
snippet ns "namespace"
namespace ${1:`!p snip.rv = path_to_namespace()`};
endsnippet

snippet cls "full file class declaration"
<?php

namespace `!p snip.rv = path_to_namespace()`;

class `!p snip.rv = snip.basename`
{
	public function ${3:__construct}($4)
	{
		${0:${VISUAL}}
	}
}
endsnippet

snippet pub "public property"
public $$1${2: = ${3:null}};
endsnippet

snippet pro "protected property"
protected $$1${2: = ${3:null}};
endsnippet

snippet pri "protected property"
private $$1${2: = ${3:null}};
endsnippet

snippet cons "constructor method"
public function __construct($1)
{
	${0:${VISUAL}}
}
endsnippet

snippet me "public method"
public function $1($2)
{
	$3
}
endsnippet

snippet pme "protected method"
protected function $1($2)
{
	${0:${VISUAL}}
}
endsnippet

snippet pime "private method"
private function $1($2)
{
	${0:${VISUAL}}
}
endsnippet

snippet sme "public static method"
public static function $1($2)
{
	${0:${VISUAL}}
}
endsnippet

snippet psme "protected static method"
protected static function $1($2)
{
	${0:${VISUAL}}
}
endsnippet

snippet pisme "private static method"
private static function $1($2)
{
	${0:${VISUAL}}
}
endsnippet
#= endsection }}}1

#= PHPUnit {{{1
#==================================================
snippet tcls "Test class"
<?php

namespace `!p snip.rv = path_to_namespace()`;

use ${1:PHPUnit\Framework}\TestCase;
use `!p snip.rv = '\\'.join(path.replace('Test.php', '').split('/')[1:])`;$2

class `!p snip.rv = snip.basename;` extends TestCase
{
	$0
}
endsnippet

snippet tup "Test setUp"
public function setUp()
{
	parent::setUp();
	${0:${VISUAL}}
}
endsnippet

snippet tdo "Test tearDown"
public function tearDown()
{
	parent::tearDown();
	${0:${VISUAL}}
}
endsnippet

snippet tme "Test method"
/** @test */
public function $1`!p t[1] = t[1].replace(' ', '_')`()
{
	${0:${VISUAL}}
}
endsnippet
#= endsection }}}1
